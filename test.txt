#include "philo.h"

void	*test(t_philo *arr)
{
	arr[0].id = 0;
	arr[1].id = 1;
	arr[2].id = 2;
	return (arr);
}

int	main(int ac, char **av)
{
	t_philo *philos;

	philos = test(philos);
	int i = 0;
	while (i < 3)
	{
		printf("num[%d] %d\n", i, philos[i].id);
		i++;
	}
}
/////////////////

#include "philo.h"

void	run_monitor(t_philo *philos);

void	run_threads(t_philo *philos)
{
	int	i;

	i = 0;
	init_forks_of_philos(philos);
	printf("%d\n", philos[0].info->num_philos);
	while (i < philos[0].info->num_philos)
	{
		if (pthread_create(&philos[i].tread, NULL, &routine, &philos[i]))
			perror("pthread_create");
		i++;
	}
}

void	run_monitor(t_philo *philos)
{
	pthread_t	monitor_th;

	if (pthread_create(&monitor_th, NULL, &monitor, philos[0].info))
		perror("pthread_create");
	pthread_join(monitor_th, NULL);
}

void	wait_for_treads(t_philo *philos)
{
	int	i;

	i = 0;
	while (i < philos[0].info->num_philos)
	{
		if (pthread_join(philos[i].tread, NULL) != 0)
			perror("pthread_join");
		i++;
	}
}

int	philo(int ac, char **av)
{
	int		status;
	t_philo	*philos;

	if (ac == 5)
		status = pargsing(av, FORNUMBER);
	else
		status = pargsing(av, FIVENUMBER);
	if (status == FALSE)
		return (print_parsing_err(), 0);
	philos = malloc(sizeof(t_philo) * ft_atoi(av[1]));
	philos->info = malloc(sizeof(t_info));
	if (ac == 5)
		save_data_to_strcut(philos->info, av, FORNUMBER);
	else
		save_data_to_strcut(philos->info, av, FIVENUMBER);
	full_arr(philos);
	run_threads(philos);
	run_monitor(philos);
	wait_for_treads(philos);
	free_meme(philos);
	return (1);
}
////////////////////////////////////
int	norminett(int *i, t_info *info)
{
	while (*i < info->num_philos)
	{
		if (check_number_of_meals(info))
		{
			pthread_mutex_lock(&info->eate_lock);
			info->is_last_meal = TRUE;
			pthread_mutex_unlock(&info->eate_lock);
			return (FALSE);
		}
		if (check_is_dei(&info->philo[*i]))
		{
			print_action(&info->philo[*i], "\033[1;31m%ld %d died️\033[0m\n");
			pthread_mutex_lock(&info->die_lock);
			info->is_same_one_dei = TRUE;
			pthread_mutex_unlock(&info->die_lock);
			return (FALSE);
		}
		(*i)++;
	}
	return (TRUE);
}

void	*monitor_d(void *arg)
{
	t_info	*info;
	int		i;

	info = (t_info *)arg;
	i = 0;
	while (1)
	{
		i = 0;

		while (i < info->num_philos)
		{
			if (check_is_dei(&info->philo[i]))
			{
				print_action(&info->philo[i], "\033[1;31m%ld %d died️\033[0m\n");
				pthread_mutex_lock(&info->die_lock);
				info->is_same_one_dei = TRUE;
				pthread_mutex_unlock(&info->die_lock);
				return (FALSE);
			}
		}
		i++;
		usleep(1000);
	}
}
void	*monitor_eat(void *arg)
{
	t_info	*info;
	int		i;

	info = (t_info *)arg;
	i = 0;
	while (1)
	{
		i = 0;

		while (i < info->num_philos)
		{
			if (check_number_of_meals(info))
			{
				pthread_mutex_lock(&info->eate_lock);
				info->is_last_meal = TRUE;
				pthread_mutex_unlock(&info->eate_lock);
				return (FALSE);
			}
		}
		// if (check_is_dei(&info->philo[*i]))
		// {
		// 	print_action(&info->philo[*i], "\033[1;31m%ld %d died️\033[0m\n");
		// 	pthread_mutex_lock(&info->die_lock);
		// 	info->is_same_one_dei = TRUE;
		// 	pthread_mutex_unlock(&info->die_lock);
		// 	return (FALSE);
		// }
		i++;
		usleep(1000);
	}
}
///////////////////////////////////////////////////
// void	init_forks_of_philos(t_philo *philos)
// {
// 	int	i;

// 	i = 0;
// 	while (i < philos->info->num_philos)
// 	{
// 		philos[i].last_meal = get_time();
// 		// if (!(i + 1 == philos->info->num_philos))
// 		// {
// 		// 	philos[i].left_fork = &philos->info->forks[i + 1];
// 		// 	philos[i].right_fork = &philos->info->forks[i];
// 		// }
// 		// else
// 		// {
// 		// 	philos[i].left_fork = &philos->info->forks[0];
// 		// 	philos[i].right_fork = &philos->info->forks[i];
// 		// }
// 		i++;
// 	}
// }

// void	thinking(t_philo *philo)
// {
// 	pthread_mutex_lock(&philo->info->die_lock);
// 	if (philo->info->is_same_one_dei || philo->info->is_last_meal)
// 	{
// 		pthread_mutex_unlock(&philo->info->die_lock);
// 		return ;
// 	}
// 	pthread_mutex_unlock(&philo->info->die_lock);
// 	if (!(philo->info->must_eate_counter != -1
// 			&& philo->info->count_eaten == philo->info->must_eate_counter))
// 			print_action(philo, "\033[34m%ld %d is thinking\033[0m\n");
// 	else
// 		return ;
// 	// pthread_mutex_lock(&philo->info->think_lock);
// 	if (philo->info->num_philos && philo->id % 2)
// 	{
// 		if (philo->info->time_to_eate > philo->info->time_to_sleep)
// 		{
// 			usleep((philo->info->time_to_eate - philo->info->time_to_sleep)
// 				* 1000);
// 		}
// 		else if (philo->info->time_to_eate < philo->info->time_to_sleep
			&& philo->id % 2)
// 		{
// 			usleep((philo->info->time_to_eate * 2) * 1000);
// 		}
// 		else
// 			usleep(1000);
// 	}
// 	// pthread_mutex_unlock(&philo->info->think_lock);
// }